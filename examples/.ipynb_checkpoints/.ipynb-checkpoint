{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/antonogorodnikov/anaconda3/envs/test2/lib/python3.7/site-packages/anndata/_core/anndata.py:21: FutureWarning: pandas.core.index is deprecated and will be removed in a future version.  The public classes are available in the top-level namespace.\n",
      "  from pandas.core.index import RangeIndex\n"
     ]
    }
   ],
   "source": [
    "from scito import preprocess\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = '/Users/antonogorodnikov/Documents/Work/DataSci/SCITO-seq/tests/100k_pbmc_filtered_feature_bc_matrix.h5'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Variable names are not unique. To make them unique, call `.var_names_make_unique`.\n"
     ]
    }
   ],
   "source": [
    "lol = preprocess.ScitoFrame(path=path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/antonogorodnikov/anaconda3/envs/test2/lib/python3.7/site-packages/pandas/core/strings.py:1952: UserWarning: This pattern has match groups. To actually get the groups, use str.extract.\n",
      "  return func(self, *args, **kwargs)\n",
      "Transforming to str index.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Keeping sparse matrix with antibody expression only. Target = self.input\n",
      "Keeping linear scale data for computing average\n",
      "Performing k-means clustering\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Transforming to str index.\n",
      "/Users/antonogorodnikov/anaconda3/envs/test2/lib/python3.7/site-packages/scipy/sparse/_index.py:126: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.\n",
      "  self._set_arrayXarray(i, j, x)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cutoff for barcode1: 2623 reads\n",
      "Cutoff for barcode2: 972 reads\n",
      "Cutoff for barcode3: 657 reads\n",
      "Cutoff for barcode4: 1039 reads\n",
      "Cutoff for barcode5: 960 reads\n",
      "Cutoff for barcode6: 1478 reads\n",
      "Cutoff for barcode7: 1220 reads\n",
      "Cutoff for barcode8: 757 reads\n",
      "Cutoff for barcode9: 1317 reads\n",
      "Cutoff for barcode10: 258 reads\n",
      "Assigning best guesses\n"
     ]
    }
   ],
   "source": [
    "lol_2 = lol.detectMux(batchid_string=\"barcode\",\n",
    "                        positiveQuantile=0.99,\n",
    "                        n_clust=None,\n",
    "                        n_init=100,\n",
    "                        kfunc=\"kmeans\",\n",
    "                        maxneighbor=100,\n",
    "                        seed=42,\n",
    "                        keep_input=True,\n",
    "                        verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 35371 × 10 \n",
       "    obs: 'n_counts', 'batch_cluster', 'assignment', 'best_guess', 'expression'\n",
       "    var: 'batch'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lol_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n_counts</th>\n",
       "      <th>batch_cluster</th>\n",
       "      <th>assignment</th>\n",
       "      <th>best_guess</th>\n",
       "      <th>expression</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AAACCCAAGAAGTCTA-1</th>\n",
       "      <td>3470.0</td>\n",
       "      <td>8</td>\n",
       "      <td>MTP</td>\n",
       "      <td>(barcode3, barcode2)</td>\n",
       "      <td>(8.64, 8.16)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACCCAAGAGGTCGT-1</th>\n",
       "      <td>2601.0</td>\n",
       "      <td>0</td>\n",
       "      <td>MTP</td>\n",
       "      <td>(barcode6, barcode9, barcode4)</td>\n",
       "      <td>(8.46, 7.72, 7.69)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACCCAAGCATCCTA-1</th>\n",
       "      <td>905.0</td>\n",
       "      <td>0</td>\n",
       "      <td>MTP</td>\n",
       "      <td>(barcode6, barcode3)</td>\n",
       "      <td>(8.82, 6.53)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACCCAAGCATTGAA-1</th>\n",
       "      <td>1256.0</td>\n",
       "      <td>5</td>\n",
       "      <td>SNG</td>\n",
       "      <td>(barcode10,)</td>\n",
       "      <td>(8.85,)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACCCAAGGAAGTGA-1</th>\n",
       "      <td>1587.0</td>\n",
       "      <td>7</td>\n",
       "      <td>MTP</td>\n",
       "      <td>(barcode5, barcode6)</td>\n",
       "      <td>(8.39, 7.93)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTTGTCCATTTGT-1</th>\n",
       "      <td>727.0</td>\n",
       "      <td>7</td>\n",
       "      <td>SNG</td>\n",
       "      <td>(barcode5,)</td>\n",
       "      <td>(8.67,)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTTGTCCCAACTC-1</th>\n",
       "      <td>1541.0</td>\n",
       "      <td>6</td>\n",
       "      <td>SNG</td>\n",
       "      <td>(barcode7,)</td>\n",
       "      <td>(8.87,)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTTGTCCGAGGCT-1</th>\n",
       "      <td>1611.0</td>\n",
       "      <td>6</td>\n",
       "      <td>MTP</td>\n",
       "      <td>(barcode1, barcode7)</td>\n",
       "      <td>(8.5, 8.21)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTTGTCGTTCGCT-1</th>\n",
       "      <td>1016.0</td>\n",
       "      <td>2</td>\n",
       "      <td>SNG</td>\n",
       "      <td>(barcode1,)</td>\n",
       "      <td>(8.96,)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTTGTCTACCCAC-1</th>\n",
       "      <td>1334.0</td>\n",
       "      <td>5</td>\n",
       "      <td>SNG</td>\n",
       "      <td>(barcode10,)</td>\n",
       "      <td>(8.93,)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>35371 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    n_counts  batch_cluster assignment  \\\n",
       "AAACCCAAGAAGTCTA-1    3470.0              8        MTP   \n",
       "AAACCCAAGAGGTCGT-1    2601.0              0        MTP   \n",
       "AAACCCAAGCATCCTA-1     905.0              0        MTP   \n",
       "AAACCCAAGCATTGAA-1    1256.0              5        SNG   \n",
       "AAACCCAAGGAAGTGA-1    1587.0              7        MTP   \n",
       "...                      ...            ...        ...   \n",
       "TTTGTTGTCCATTTGT-1     727.0              7        SNG   \n",
       "TTTGTTGTCCCAACTC-1    1541.0              6        SNG   \n",
       "TTTGTTGTCCGAGGCT-1    1611.0              6        MTP   \n",
       "TTTGTTGTCGTTCGCT-1    1016.0              2        SNG   \n",
       "TTTGTTGTCTACCCAC-1    1334.0              5        SNG   \n",
       "\n",
       "                                        best_guess          expression  \n",
       "AAACCCAAGAAGTCTA-1            (barcode3, barcode2)        (8.64, 8.16)  \n",
       "AAACCCAAGAGGTCGT-1  (barcode6, barcode9, barcode4)  (8.46, 7.72, 7.69)  \n",
       "AAACCCAAGCATCCTA-1            (barcode6, barcode3)        (8.82, 6.53)  \n",
       "AAACCCAAGCATTGAA-1                    (barcode10,)             (8.85,)  \n",
       "AAACCCAAGGAAGTGA-1            (barcode5, barcode6)        (8.39, 7.93)  \n",
       "...                                            ...                 ...  \n",
       "TTTGTTGTCCATTTGT-1                     (barcode5,)             (8.67,)  \n",
       "TTTGTTGTCCCAACTC-1                     (barcode7,)             (8.87,)  \n",
       "TTTGTTGTCCGAGGCT-1            (barcode1, barcode7)         (8.5, 8.21)  \n",
       "TTTGTTGTCGTTCGCT-1                     (barcode1,)             (8.96,)  \n",
       "TTTGTTGTCTACCCAC-1                    (barcode10,)             (8.93,)  \n",
       "\n",
       "[35371 rows x 5 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lol_2.obs\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cells_per_drop</th>\n",
       "      <th>N_drops</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0 cells per drop</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1 cells per drop</td>\n",
       "      <td>17900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2 cells per drop</td>\n",
       "      <td>13195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3 cells per drop</td>\n",
       "      <td>3710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4 cells per drop</td>\n",
       "      <td>523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5 cells per drop</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6 cells per drop</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cells_per_drop  N_drops\n",
       "0  0 cells per drop        0\n",
       "1  1 cells per drop    17900\n",
       "2  2 cells per drop    13195\n",
       "3  3 cells per drop     3710\n",
       "4  4 cells per drop      523\n",
       "5  5 cells per drop       40\n",
       "6  6 cells per drop        3"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lol.meta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x133ef9090>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x = list(range(0,7)), y=lol.meta.N_drops)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1340932d0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(lol.n_positive)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
